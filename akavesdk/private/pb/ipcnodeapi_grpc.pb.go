// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: ipcnodeapi.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IPCNodeAPI_ConnectionParams_FullMethodName        = "/ipcnodeapi.IPCNodeAPI/ConnectionParams"
	IPCNodeAPI_BucketCreate_FullMethodName            = "/ipcnodeapi.IPCNodeAPI/BucketCreate"
	IPCNodeAPI_BucketView_FullMethodName              = "/ipcnodeapi.IPCNodeAPI/BucketView"
	IPCNodeAPI_BucketList_FullMethodName              = "/ipcnodeapi.IPCNodeAPI/BucketList"
	IPCNodeAPI_BucketDelete_FullMethodName            = "/ipcnodeapi.IPCNodeAPI/BucketDelete"
	IPCNodeAPI_FileUploadChunkCreate_FullMethodName   = "/ipcnodeapi.IPCNodeAPI/FileUploadChunkCreate"
	IPCNodeAPI_FileUploadBlock_FullMethodName         = "/ipcnodeapi.IPCNodeAPI/FileUploadBlock"
	IPCNodeAPI_FileView_FullMethodName                = "/ipcnodeapi.IPCNodeAPI/FileView"
	IPCNodeAPI_FileDownloadCreate_FullMethodName      = "/ipcnodeapi.IPCNodeAPI/FileDownloadCreate"
	IPCNodeAPI_FileDownloadChunkCreate_FullMethodName = "/ipcnodeapi.IPCNodeAPI/FileDownloadChunkCreate"
	IPCNodeAPI_FileDownloadBlock_FullMethodName       = "/ipcnodeapi.IPCNodeAPI/FileDownloadBlock"
	IPCNodeAPI_FileList_FullMethodName                = "/ipcnodeapi.IPCNodeAPI/FileList"
	IPCNodeAPI_FileDelete_FullMethodName              = "/ipcnodeapi.IPCNodeAPI/FileDelete"
)

// IPCNodeAPIClient is the client API for IPCNodeAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IPCNodeAPIClient interface {
	ConnectionParams(ctx context.Context, in *ConnectionParamsRequest, opts ...grpc.CallOption) (*ConnectionParamsResponse, error)
	// Bucket APIs.
	BucketCreate(ctx context.Context, in *IPCBucketCreateRequest, opts ...grpc.CallOption) (*IPCBucketCreateResponse, error)
	BucketView(ctx context.Context, in *IPCBucketViewRequest, opts ...grpc.CallOption) (*IPCBucketViewResponse, error)
	BucketList(ctx context.Context, in *IPCBucketListRequest, opts ...grpc.CallOption) (*IPCBucketListResponse, error)
	BucketDelete(ctx context.Context, in *IPCBucketDeleteRequest, opts ...grpc.CallOption) (*IPCBucketDeleteResponse, error)
	// File APIs.
	FileUploadChunkCreate(ctx context.Context, in *IPCFileUploadChunkCreateRequest, opts ...grpc.CallOption) (*IPCFileUploadChunkCreateResponse, error)
	FileUploadBlock(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[IPCFileBlockData, IPCFileUploadBlockResponse], error)
	FileView(ctx context.Context, in *IPCFileViewRequest, opts ...grpc.CallOption) (*IPCFileViewResponse, error)
	FileDownloadCreate(ctx context.Context, in *IPCFileDownloadCreateRequest, opts ...grpc.CallOption) (*IPCFileDownloadCreateResponse, error)
	FileDownloadChunkCreate(ctx context.Context, in *IPCFileDownloadChunkCreateRequest, opts ...grpc.CallOption) (*IPCFileDownloadChunkCreateResponse, error)
	FileDownloadBlock(ctx context.Context, in *IPCFileDownloadBlockRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[IPCFileBlockData], error)
	FileList(ctx context.Context, in *IPCFileListRequest, opts ...grpc.CallOption) (*IPCFileListResponse, error)
	FileDelete(ctx context.Context, in *IPCFileDeleteRequest, opts ...grpc.CallOption) (*IPCFileDeleteResponse, error)
}

type iPCNodeAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewIPCNodeAPIClient(cc grpc.ClientConnInterface) IPCNodeAPIClient {
	return &iPCNodeAPIClient{cc}
}

func (c *iPCNodeAPIClient) ConnectionParams(ctx context.Context, in *ConnectionParamsRequest, opts ...grpc.CallOption) (*ConnectionParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectionParamsResponse)
	err := c.cc.Invoke(ctx, IPCNodeAPI_ConnectionParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPCNodeAPIClient) BucketCreate(ctx context.Context, in *IPCBucketCreateRequest, opts ...grpc.CallOption) (*IPCBucketCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IPCBucketCreateResponse)
	err := c.cc.Invoke(ctx, IPCNodeAPI_BucketCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPCNodeAPIClient) BucketView(ctx context.Context, in *IPCBucketViewRequest, opts ...grpc.CallOption) (*IPCBucketViewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IPCBucketViewResponse)
	err := c.cc.Invoke(ctx, IPCNodeAPI_BucketView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPCNodeAPIClient) BucketList(ctx context.Context, in *IPCBucketListRequest, opts ...grpc.CallOption) (*IPCBucketListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IPCBucketListResponse)
	err := c.cc.Invoke(ctx, IPCNodeAPI_BucketList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPCNodeAPIClient) BucketDelete(ctx context.Context, in *IPCBucketDeleteRequest, opts ...grpc.CallOption) (*IPCBucketDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IPCBucketDeleteResponse)
	err := c.cc.Invoke(ctx, IPCNodeAPI_BucketDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPCNodeAPIClient) FileUploadChunkCreate(ctx context.Context, in *IPCFileUploadChunkCreateRequest, opts ...grpc.CallOption) (*IPCFileUploadChunkCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IPCFileUploadChunkCreateResponse)
	err := c.cc.Invoke(ctx, IPCNodeAPI_FileUploadChunkCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPCNodeAPIClient) FileUploadBlock(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[IPCFileBlockData, IPCFileUploadBlockResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IPCNodeAPI_ServiceDesc.Streams[0], IPCNodeAPI_FileUploadBlock_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[IPCFileBlockData, IPCFileUploadBlockResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IPCNodeAPI_FileUploadBlockClient = grpc.ClientStreamingClient[IPCFileBlockData, IPCFileUploadBlockResponse]

func (c *iPCNodeAPIClient) FileView(ctx context.Context, in *IPCFileViewRequest, opts ...grpc.CallOption) (*IPCFileViewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IPCFileViewResponse)
	err := c.cc.Invoke(ctx, IPCNodeAPI_FileView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPCNodeAPIClient) FileDownloadCreate(ctx context.Context, in *IPCFileDownloadCreateRequest, opts ...grpc.CallOption) (*IPCFileDownloadCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IPCFileDownloadCreateResponse)
	err := c.cc.Invoke(ctx, IPCNodeAPI_FileDownloadCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPCNodeAPIClient) FileDownloadChunkCreate(ctx context.Context, in *IPCFileDownloadChunkCreateRequest, opts ...grpc.CallOption) (*IPCFileDownloadChunkCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IPCFileDownloadChunkCreateResponse)
	err := c.cc.Invoke(ctx, IPCNodeAPI_FileDownloadChunkCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPCNodeAPIClient) FileDownloadBlock(ctx context.Context, in *IPCFileDownloadBlockRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[IPCFileBlockData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IPCNodeAPI_ServiceDesc.Streams[1], IPCNodeAPI_FileDownloadBlock_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[IPCFileDownloadBlockRequest, IPCFileBlockData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IPCNodeAPI_FileDownloadBlockClient = grpc.ServerStreamingClient[IPCFileBlockData]

func (c *iPCNodeAPIClient) FileList(ctx context.Context, in *IPCFileListRequest, opts ...grpc.CallOption) (*IPCFileListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IPCFileListResponse)
	err := c.cc.Invoke(ctx, IPCNodeAPI_FileList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPCNodeAPIClient) FileDelete(ctx context.Context, in *IPCFileDeleteRequest, opts ...grpc.CallOption) (*IPCFileDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IPCFileDeleteResponse)
	err := c.cc.Invoke(ctx, IPCNodeAPI_FileDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPCNodeAPIServer is the server API for IPCNodeAPI service.
// All implementations must embed UnimplementedIPCNodeAPIServer
// for forward compatibility.
type IPCNodeAPIServer interface {
	ConnectionParams(context.Context, *ConnectionParamsRequest) (*ConnectionParamsResponse, error)
	// Bucket APIs.
	BucketCreate(context.Context, *IPCBucketCreateRequest) (*IPCBucketCreateResponse, error)
	BucketView(context.Context, *IPCBucketViewRequest) (*IPCBucketViewResponse, error)
	BucketList(context.Context, *IPCBucketListRequest) (*IPCBucketListResponse, error)
	BucketDelete(context.Context, *IPCBucketDeleteRequest) (*IPCBucketDeleteResponse, error)
	// File APIs.
	FileUploadChunkCreate(context.Context, *IPCFileUploadChunkCreateRequest) (*IPCFileUploadChunkCreateResponse, error)
	FileUploadBlock(grpc.ClientStreamingServer[IPCFileBlockData, IPCFileUploadBlockResponse]) error
	FileView(context.Context, *IPCFileViewRequest) (*IPCFileViewResponse, error)
	FileDownloadCreate(context.Context, *IPCFileDownloadCreateRequest) (*IPCFileDownloadCreateResponse, error)
	FileDownloadChunkCreate(context.Context, *IPCFileDownloadChunkCreateRequest) (*IPCFileDownloadChunkCreateResponse, error)
	FileDownloadBlock(*IPCFileDownloadBlockRequest, grpc.ServerStreamingServer[IPCFileBlockData]) error
	FileList(context.Context, *IPCFileListRequest) (*IPCFileListResponse, error)
	FileDelete(context.Context, *IPCFileDeleteRequest) (*IPCFileDeleteResponse, error)
	mustEmbedUnimplementedIPCNodeAPIServer()
}

// UnimplementedIPCNodeAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIPCNodeAPIServer struct{}

func (UnimplementedIPCNodeAPIServer) ConnectionParams(context.Context, *ConnectionParamsRequest) (*ConnectionParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectionParams not implemented")
}
func (UnimplementedIPCNodeAPIServer) BucketCreate(context.Context, *IPCBucketCreateRequest) (*IPCBucketCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BucketCreate not implemented")
}
func (UnimplementedIPCNodeAPIServer) BucketView(context.Context, *IPCBucketViewRequest) (*IPCBucketViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BucketView not implemented")
}
func (UnimplementedIPCNodeAPIServer) BucketList(context.Context, *IPCBucketListRequest) (*IPCBucketListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BucketList not implemented")
}
func (UnimplementedIPCNodeAPIServer) BucketDelete(context.Context, *IPCBucketDeleteRequest) (*IPCBucketDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BucketDelete not implemented")
}
func (UnimplementedIPCNodeAPIServer) FileUploadChunkCreate(context.Context, *IPCFileUploadChunkCreateRequest) (*IPCFileUploadChunkCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileUploadChunkCreate not implemented")
}
func (UnimplementedIPCNodeAPIServer) FileUploadBlock(grpc.ClientStreamingServer[IPCFileBlockData, IPCFileUploadBlockResponse]) error {
	return status.Errorf(codes.Unimplemented, "method FileUploadBlock not implemented")
}
func (UnimplementedIPCNodeAPIServer) FileView(context.Context, *IPCFileViewRequest) (*IPCFileViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileView not implemented")
}
func (UnimplementedIPCNodeAPIServer) FileDownloadCreate(context.Context, *IPCFileDownloadCreateRequest) (*IPCFileDownloadCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDownloadCreate not implemented")
}
func (UnimplementedIPCNodeAPIServer) FileDownloadChunkCreate(context.Context, *IPCFileDownloadChunkCreateRequest) (*IPCFileDownloadChunkCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDownloadChunkCreate not implemented")
}
func (UnimplementedIPCNodeAPIServer) FileDownloadBlock(*IPCFileDownloadBlockRequest, grpc.ServerStreamingServer[IPCFileBlockData]) error {
	return status.Errorf(codes.Unimplemented, "method FileDownloadBlock not implemented")
}
func (UnimplementedIPCNodeAPIServer) FileList(context.Context, *IPCFileListRequest) (*IPCFileListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileList not implemented")
}
func (UnimplementedIPCNodeAPIServer) FileDelete(context.Context, *IPCFileDeleteRequest) (*IPCFileDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDelete not implemented")
}
func (UnimplementedIPCNodeAPIServer) mustEmbedUnimplementedIPCNodeAPIServer() {}
func (UnimplementedIPCNodeAPIServer) testEmbeddedByValue()                    {}

// UnsafeIPCNodeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IPCNodeAPIServer will
// result in compilation errors.
type UnsafeIPCNodeAPIServer interface {
	mustEmbedUnimplementedIPCNodeAPIServer()
}

func RegisterIPCNodeAPIServer(s grpc.ServiceRegistrar, srv IPCNodeAPIServer) {
	// If the following call pancis, it indicates UnimplementedIPCNodeAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IPCNodeAPI_ServiceDesc, srv)
}

func _IPCNodeAPI_ConnectionParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPCNodeAPIServer).ConnectionParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPCNodeAPI_ConnectionParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPCNodeAPIServer).ConnectionParams(ctx, req.(*ConnectionParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPCNodeAPI_BucketCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPCBucketCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPCNodeAPIServer).BucketCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPCNodeAPI_BucketCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPCNodeAPIServer).BucketCreate(ctx, req.(*IPCBucketCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPCNodeAPI_BucketView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPCBucketViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPCNodeAPIServer).BucketView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPCNodeAPI_BucketView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPCNodeAPIServer).BucketView(ctx, req.(*IPCBucketViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPCNodeAPI_BucketList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPCBucketListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPCNodeAPIServer).BucketList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPCNodeAPI_BucketList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPCNodeAPIServer).BucketList(ctx, req.(*IPCBucketListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPCNodeAPI_BucketDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPCBucketDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPCNodeAPIServer).BucketDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPCNodeAPI_BucketDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPCNodeAPIServer).BucketDelete(ctx, req.(*IPCBucketDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPCNodeAPI_FileUploadChunkCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPCFileUploadChunkCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPCNodeAPIServer).FileUploadChunkCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPCNodeAPI_FileUploadChunkCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPCNodeAPIServer).FileUploadChunkCreate(ctx, req.(*IPCFileUploadChunkCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPCNodeAPI_FileUploadBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IPCNodeAPIServer).FileUploadBlock(&grpc.GenericServerStream[IPCFileBlockData, IPCFileUploadBlockResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IPCNodeAPI_FileUploadBlockServer = grpc.ClientStreamingServer[IPCFileBlockData, IPCFileUploadBlockResponse]

func _IPCNodeAPI_FileView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPCFileViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPCNodeAPIServer).FileView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPCNodeAPI_FileView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPCNodeAPIServer).FileView(ctx, req.(*IPCFileViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPCNodeAPI_FileDownloadCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPCFileDownloadCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPCNodeAPIServer).FileDownloadCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPCNodeAPI_FileDownloadCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPCNodeAPIServer).FileDownloadCreate(ctx, req.(*IPCFileDownloadCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPCNodeAPI_FileDownloadChunkCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPCFileDownloadChunkCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPCNodeAPIServer).FileDownloadChunkCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPCNodeAPI_FileDownloadChunkCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPCNodeAPIServer).FileDownloadChunkCreate(ctx, req.(*IPCFileDownloadChunkCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPCNodeAPI_FileDownloadBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IPCFileDownloadBlockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IPCNodeAPIServer).FileDownloadBlock(m, &grpc.GenericServerStream[IPCFileDownloadBlockRequest, IPCFileBlockData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IPCNodeAPI_FileDownloadBlockServer = grpc.ServerStreamingServer[IPCFileBlockData]

func _IPCNodeAPI_FileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPCFileListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPCNodeAPIServer).FileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPCNodeAPI_FileList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPCNodeAPIServer).FileList(ctx, req.(*IPCFileListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPCNodeAPI_FileDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPCFileDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPCNodeAPIServer).FileDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPCNodeAPI_FileDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPCNodeAPIServer).FileDelete(ctx, req.(*IPCFileDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IPCNodeAPI_ServiceDesc is the grpc.ServiceDesc for IPCNodeAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IPCNodeAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ipcnodeapi.IPCNodeAPI",
	HandlerType: (*IPCNodeAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConnectionParams",
			Handler:    _IPCNodeAPI_ConnectionParams_Handler,
		},
		{
			MethodName: "BucketCreate",
			Handler:    _IPCNodeAPI_BucketCreate_Handler,
		},
		{
			MethodName: "BucketView",
			Handler:    _IPCNodeAPI_BucketView_Handler,
		},
		{
			MethodName: "BucketList",
			Handler:    _IPCNodeAPI_BucketList_Handler,
		},
		{
			MethodName: "BucketDelete",
			Handler:    _IPCNodeAPI_BucketDelete_Handler,
		},
		{
			MethodName: "FileUploadChunkCreate",
			Handler:    _IPCNodeAPI_FileUploadChunkCreate_Handler,
		},
		{
			MethodName: "FileView",
			Handler:    _IPCNodeAPI_FileView_Handler,
		},
		{
			MethodName: "FileDownloadCreate",
			Handler:    _IPCNodeAPI_FileDownloadCreate_Handler,
		},
		{
			MethodName: "FileDownloadChunkCreate",
			Handler:    _IPCNodeAPI_FileDownloadChunkCreate_Handler,
		},
		{
			MethodName: "FileList",
			Handler:    _IPCNodeAPI_FileList_Handler,
		},
		{
			MethodName: "FileDelete",
			Handler:    _IPCNodeAPI_FileDelete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FileUploadBlock",
			Handler:       _IPCNodeAPI_FileUploadBlock_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FileDownloadBlock",
			Handler:       _IPCNodeAPI_FileDownloadBlock_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ipcnodeapi.proto",
}
