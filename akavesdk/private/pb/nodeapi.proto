syntax = "proto3";

option go_package = "akave.ai/akave/private/pb";

import "google/protobuf/timestamp.proto";

package nodeapi;

service NodeAPI {
  // Bucket APIs.
  rpc BucketCreate (BucketCreateRequest) returns (BucketCreateResponse) {}
  rpc BucketView (BucketViewRequest) returns (BucketViewResponse) {}
  rpc BucketList (BucketListRequest) returns (BucketListResponse) {}
  rpc BucketDelete (BucketDeleteRequest) returns (BucketDeleteResponse) {}
}

message BucketCreateRequest {
  string name = 1;
}

message BucketCreateResponse {
  string name = 1;
  google.protobuf.Timestamp created_at = 2;
}

message BucketViewRequest {
  string bucket_name = 1;
}
message BucketViewResponse {
  string name = 1;
  google.protobuf.Timestamp created_at = 2;
}

message BucketListRequest {}
message BucketListResponse {
  repeated Bucket buckets = 1;

  message Bucket {
    string name = 1;
    google.protobuf.Timestamp created_at = 2;
  }
}

message BucketDeleteRequest {
  string name = 1;
}
message BucketDeleteResponse {}

message FileBlockData {
  bytes data = 1;
  string cid = 2;
}

// Stream APIs.
service StreamAPI {
  rpc FileUploadCreate (StreamFileUploadCreateRequest) returns (StreamFileUploadCreateResponse) {}
  rpc FileUploadChunkCreate (StreamFileUploadChunkCreateRequest) returns (StreamFileUploadChunkCreateResponse) {}
  rpc FileUploadBlock (stream StreamFileBlockData) returns (StreamFileUploadBlockResponse) {}
  rpc FileUploadCommit (StreamFileUploadCommitRequest) returns (StreamFileUploadCommitResponse) {}
  rpc FileDownloadCreate (StreamFileDownloadCreateRequest) returns (StreamFileDownloadCreateResponse) {}
  rpc FileDownloadRangeCreate (StreamFileDownloadRangeCreateRequest) returns (StreamFileDownloadCreateResponse) {}
  rpc FileDownloadChunkCreate (StreamFileDownloadChunkCreateRequest) returns (StreamFileDownloadChunkCreateResponse) {}
  rpc FileDownloadChunkCreateV2 (StreamFileDownloadChunkCreateRequest) returns (StreamFileDownloadChunkCreateResponseV2) {}
  rpc FileDownloadBlock (StreamFileDownloadBlockRequest) returns (stream StreamFileBlockData) {}
  rpc FileList (StreamFileListRequest) returns (StreamFileListResponse) {}
  rpc FileView (StreamFileViewRequest) returns (StreamFileViewResponse) {}
  rpc FileVersions (StreamFileListVersionsRequest) returns (StreamFileListVersionsResponse) {}
  rpc FileDelete (StreamFileDeleteRequest) returns (StreamFileDeleteResponse) {}
}

message StreamFileUploadCreateRequest {
  string bucket_name = 1;
  string file_name = 2;
}
message StreamFileUploadCreateResponse {
  string bucket_name = 1;
  string file_name = 2;
  string stream_id = 3;
  google.protobuf.Timestamp created_at = 4;
}

message Chunk {
  string stream_id = 1; 
  string cid = 2; 
  int64 index = 3; 
  int64 size = 4;
  repeated Block blocks = 5;

  message Block {
    string cid = 1;
    int64 size = 2;
  }
}

message StreamFileUploadChunkCreateRequest{
  Chunk chunk = 1;
}
message StreamFileUploadChunkCreateResponse {
  repeated BlockUpload blocks = 1;

  message BlockUpload {
    string cid = 1;
    string node_address = 2;
    string node_id = 3;
    string permit = 4;
  }
}

// TODO: do not reuse this message for upload and download, create seprate messages
message StreamFileBlockData {
  bytes data = 1;
  string cid = 2; // only present in first msg of request stream
  int64 index = 3; // only present in first msg of request stream
  Chunk chunk = 4; // only present in first msg of request stream
}
message StreamFileUploadBlockResponse {}

message StreamFileUploadCommitRequest {
  string stream_id = 1;
  string root_cid = 2;
  int64 chunk_count = 3;
}
message StreamFileUploadCommitResponse {
  string stream_id = 1;
  string file_name = 2;
  string bucket_name = 3;
  int64 encoded_size = 4;
  int64 size = 5;
  google.protobuf.Timestamp committed_at = 6;
}

message StreamFileDownloadCreateRequest {
  string bucket_name = 1;
  string file_name = 2;
  string root_cid = 3; // optional
}
message StreamFileDownloadCreateResponse {
  string bucket_name = 1;
  string stream_id = 2;
  repeated Chunk chunks = 3;

  message Chunk {
    string cid = 1;
    int64 encoded_size = 2;
    int64 size = 3;
  }
}

message StreamFileDownloadRangeCreateRequest {
  string bucket_name = 1;
  string file_name = 2;
  int64 start_index = 3;
  int64 end_index = 4;
}

message StreamFileDownloadChunkCreateRequest {
  string stream_id = 1;
  string chunk_cid = 2;
}
message StreamFileDownloadChunkCreateResponse {
  repeated BlockDownload blocks = 1;

  message BlockDownload {
    string cid = 1;
    int64 size = 2;
    string node_address = 3;
    string node_id = 4;
    string permit = 5;
  }
}

message StreamFileDownloadChunkCreateResponseV2 {
  repeated BlockDownload blocks = 1;

  message BlockDownload {
    string cid = 1;
    int64 size = 2;
    Akave akave = 3;
    Filecoin filecoin = 4;

    message Akave {
      string node_id = 1;
      string node_address = 2;
    }

    message Filecoin {
      string sp_address = 1;
    }
  }
}

message StreamFileDownloadBlockRequest {
  string stream_id = 1;
  string chunk_cid = 2;
  int64 chunk_index = 3; 
  string block_cid = 4;
  int64 block_index = 5; 
}

message StreamFileListRequest {
  string bucket_name = 1;
}

message File {
  string stream_id = 1;
  string root_cid = 2;
  string name = 3;
  int64 encoded_size = 4;
  int64 size = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp commited_at = 7;
}

message StreamFileListResponse {
  repeated File files = 1;
}

message StreamFileViewRequest {
  string bucket_name = 1;
  string file_name = 2;
}

message StreamFileViewResponse {
  string bucket_name = 1;
  string file_name = 2;
  string stream_id = 3;
  string root_cid = 4;
  int64 encoded_size = 5;
  int64 size = 6;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp committed_at = 8;
}

message StreamFileDeleteRequest {
  string bucket_name = 1;
  string file_name = 2;
}

message StreamFileDeleteResponse {}

message StreamFileListVersionsRequest {
  string bucket_name = 1;
  string file_name = 2;
}

message StreamFileListVersionsResponse {
  repeated File versions = 1;
}
